/*
    Copyright (c) 2020 Behemehal. See license file for details
*/

import string.ei;
import int.ei;
import void.ei;
import array.ei;
import cloak.ei;

@dont_fix_variant=true;
@notConstructable = true;
pub class collective<Value> {
    @description = "Get size of collective";
    @native=true;
    @example = "
        v col = { \"name\": \"Ahmet\" };
        print(col.len()); //1
    ";
    pub fn len() : int;

    @description = "Get value of collective";
    @native=true;
    @example = "
        v col = { \"name\": \"Ahmet\" };
        print(col.get(\"name\")); //\"Ahmet\"
    ";
    pub fn get(key : string) : Value;

    @description = "Set value of collective";
    @native=true;
    @example = "
        v col = { \"name\": \"Ahmet\" };
        col.set(\"name\", \"Mehmet\");
        print(col.get(\"name\")); //\"Mehmet\"
    ";
    pub fn set(key : string, value : Value);

    @description="Get all keys of collective";
    @native=true;
    @example = "
        v col = { \"name\": \"Ahmet\" };
        print(col.keys()); //[\"name\"]
    ";
    pub fn keys() : array<string>;

    @description = "Get all values of collective";
    @native=true;
    @example = "
        v col = { \"name\": \"Ahmet\" };
        print(col.values()); //[\"Ahmet\"]
    ";
    pub fn values() : array<Value>;

    @description = "Get all items of collective";
    @native=true;
    @example = "
        v col = { \"name\": \"Ahmet\" };
        print(col.items()); //[[\"name\", \"Ahmet\"]]
    ";
    pub fn items() : array<array<(string, Value)>>;

    @desctription = "Get heap address of collective";
    pub fn heap_position() : int;

    @description = "Unallocate collective (This function is extremely dangerous)";
    @native=true;
    @example = "
        v arr = [12, 2, 3, 4];
        arr.unallocate();
    ";
    pub fn unallocate();
}